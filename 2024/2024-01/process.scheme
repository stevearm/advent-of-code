(define (get-lists filename)
        (let ((input-tuples (map split-number-string (map string->list (read-file-to-list filename)))))
             (list (map car input-tuples)
                   (map cadr input-tuples))))

(unit-test (get-lists "2024-01/input-test.txt") '((3 4 2 1 3 3) (4 3 5 3 9 3)))


(define (sum-of-differences filename)
        (let ((sorted-lists (map sort (get-lists filename))))
        (let ((pairs (apply map list sorted-lists)))
        (apply + (map (lambda (x) (abs (- (car x) (cadr x)))) pairs)))))

(unit-test (sum-of-differences "2024-01/input-test.txt") 11)
(unit-test (sum-of-differences "2024-01/input.txt") 1970720)

(define (similarity-score-single-list single-number list-of-numbers)
        (apply + (map (lambda (x) (if (= single-number x) x 0)) list-of-numbers)))

(unit-test (similarity-score-single-list 12 '(1 12 5 15 12 8)) 24)

(define (similarity-score filename)
        (let ((lists (get-lists filename)))
        (apply + (map (lambda (x) (similarity-score-single-list x (cadr lists))) (car lists)))))

(unit-test (similarity-score "2024-01/input-test.txt") 31)
(unit-test (similarity-score "2024-01/input.txt") 17191599)

; (define (run-test) (sum-of-differences "2024-01/input.txt" )) ; Part 1
; (define (run-test) (similarity-score "2024-01/input.txt" )) ; Part 2
