(define (read-file-to-list filename)
        (call-with-input-file
            filename
            (lambda (p)
                (let f ((x (read-line p)))
                       (if (eof-object? x)
                           '()
                           (cons x (f (read-line p))))))))

(define (unit-test actual expected)
        (if (equal? actual expected)
            (begin (display ".") (newline))
            (begin (display (string "Expected: " expected " Got: " actual )) (newline))))

(define (digit? char)
        (and (char<=? #\0 char) (char<=? char #\9)))

(define (number-length digits-already-found row-char-array)
        (cond ((eq? '() row-char-array) (list digits-already-found '()))
              ((digit? (car row-char-array))
               (number-length (+ 1 digits-already-found) (cdr row-char-array)))
              (else (list digits-already-found row-char-array))))

(unit-test (number-length 0 (string->list "")) '(0 ()))
(unit-test (number-length 0 '()) '(0 ()))
(unit-test (number-length 0 (string->list "5")) '(1 ()))
(unit-test (number-length 0 (string->list "5  ")) '(1 (#\space #\space)))

(define (split-number-string char-array)
        (if (eq? '() char-array) '()
        (let ((number-and-rest (number-length 0 char-array)))
             (if (eq? 0 (car number-and-rest))
                 (split-number-string (cdr char-array))
                 (cons (string->number (substring (apply string char-array) 0 (car number-and-rest)))
                       (split-number-string (cadr number-and-rest)))))))

(unit-test (split-number-string (string->list "2   5")) '(2 5))
(unit-test (split-number-string (string->list "2  ")) '(2))
(unit-test (split-number-string (string->list "  5")) '(5))
(unit-test (split-number-string (string->list "5")) '(5))

(define (get-lists filename)
        (let ((input-tuples (map split-number-string (map string->list (read-file-to-list filename)))))
             (list (map car input-tuples)
                   (map cadr input-tuples))))

(unit-test (get-lists "2024-01/input-test.txt") '((3 4 2 1 3 3) (4 3 5 3 9 3)))

(define (length input-list)
        (if (eq? '() input-list)
            0
            (+ 1 (length (cdr input-list)))))

(unit-test (length '()) 0)
(unit-test (length '(3 4 2 1 3 3)) 6)

(define (split input-list spot)
        (if (<= spot 0)
            (list '() input-list)
            (let ((rest (split (cdr input-list) (- spot 1))))
                 (list (cons (car input-list) (car rest))
                       (cadr rest)))))

(unit-test (split '(1 2 3 4) 0) '(() (1 2 3 4)))
(unit-test (split '(1 2 3 4) 1) '((1) (2 3 4)))
(unit-test (split '(1 2 3 4) 2) '((1 2) (3 4)))

(define (merge left-list right-list)
        (cond ((eq? '() left-list) right-list)
              ((eq? '() right-list) left-list)
              ((< (car left-list) (car right-list)) (cons (car left-list) (merge (cdr left-list) right-list)))
              (else (cons (car right-list) (merge left-list (cdr right-list))))))

(unit-test (merge '() '(1 2 3 4)) '(1 2 3 4))
(unit-test (merge '(1 2 3 4) '()) '(1 2 3 4))
(unit-test (merge '(1 2) '(3 4)) '(1 2 3 4))
(unit-test (merge '(1 4) '(2 3)) '(1 2 3 4))
(unit-test (merge '(1 2 4) '(2 2 3)) '(1 2 2 2 3 4))

(define (sort input-list)
        (let ((list-length (length input-list)))
        (cond ((= list-length 0) '())
              ((= list-length 1) input-list)
              ((= list-length 2) (if (< (car input-list) (cadr input-list))
                                     input-list
                                     (list (cadr input-list) (car input-list))))
              (else (let ((halves (map sort (split input-list (floor (/ list-length 2.0))))))
                         (merge (car halves) (cadr halves)))))))

(unit-test (sort '(4 2 3 1)) '(1 2 3 4))
(unit-test (sort '(1 3 3)) '(1 3 3))
(unit-test (sort '(3 4 2 1 3 3)) '(1 2 3 3 3 4))



(define (sum-of-differences filename)
        (let ((sorted-lists (map sort (get-lists filename))))
        (let ((pairs (apply map list sorted-lists)))
        (apply + (map (lambda (x) (abs (- (car x) (cadr x)))) pairs)))))

(unit-test (sum-of-differences "2024-01/input-test.txt") 11)

(define (similarity-score-single-list single-number list-of-numbers)
        (apply + (map (lambda (x) (if (= single-number x) x 0)) list-of-numbers)))

(unit-test (similarity-score-single-list 12 '(1 12 5 15 12 8)) 24)

(define (similarity-score filename)
        (let ((lists (get-lists filename)))
        (apply + (map (lambda (x) (similarity-score-single-list x (cadr lists))) (car lists)))))

(unit-test (similarity-score "2024-01/input-test.txt") 31)

; Run real P1 question. Returns 1970720
; (define (run-test) (sum-of-differences "2024-01/input.txt" ))

; Run real P2 question. Returns 17191599
(define (run-test) (similarity-score "2024-01/input.txt" ))
