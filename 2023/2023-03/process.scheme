(define (read-file-to-list filename)
        (call-with-input-file
            filename
            (lambda (p)
                (let f ((x (read-line p)))
                       (if (eof-object? x)
                           '()
                           (cons x (f (read-line p))))))))

(define (get-symbol-points-for-row row-number column-number row-char-array)
        (cond ((eq? '() row-char-array) '())
              ((char=? #\. (car row-char-array))
               (get-symbol-points-for-row row-number (+ 1 column-number) (cdr row-char-array)))
              ((and (char<=? #\0 (car row-char-array))
                    (char<=? (car row-char-array) #\9))
               (get-symbol-points-for-row row-number (+ 1 column-number) (cdr row-char-array)))
              (else (cons (list row-number column-number)
                          (get-symbol-points-for-row row-number (+ 1 column-number) (cdr row-char-array))))))

(define (sum-of-part-numbers filename)
        (read-file-to-list filename))

; Plan for solving
; Run through file accumulating (x y) coords of symbols
; Run through file accumulating (number x-start y-start x-end y-end)
; for each number. Filter any number where a symbol isn't inside it's
; coords

(define (run-test) (get-symbol-points-for-row 1 0 (string->list "...$.*....")))

; Run the sample. Should print 4361
; (define (run-test) (read-file-to-list "2023-03/input-test.txt"))

; Run real question. Returns ?
; (define (run-test) (read-file-to-list "2023-03/input.txt" ))
