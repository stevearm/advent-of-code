(define (read-file-to-list filename)
        (call-with-input-file
            filename
            (lambda (p)
                (let f ((x (read-line p)))
                       (if (eof-object? x)
                           '()
                           (cons x (f (read-line p))))))))

(define (get-symbol-points-for-row row-number column-number row-char-array)
        (if (eq? '() row-char-array) '()
            (let ((remainder (get-symbol-points-for-row row-number (+ 1 column-number) (cdr row-char-array))))
                 (cond ((char=? #\. (car row-char-array)) remainder)
                       ((and (char<=? #\0 (car row-char-array)) (char<=? (car row-char-array) #\9)) remainder)
                       (else (cons (list row-number column-number) remainder))))))

(define (get-symbol-points row-number diagram)
        (if (eq? '() diagram)
            '()
            (append (get-symbol-points-for-row row-number 0 (string->list (car diagram)))
                    (get-symbol-points (+ 1 row-number) (cdr diagram)))))

(define (sum-of-part-numbers filename)
        (read-file-to-list filename))

; Plan for solving
; Run through file accumulating (x y) coords of symbols
; Run through file accumulating (number x-start y-start x-end y-end)
; for each number. Filter any number where a symbol isn't inside it's
; coords

; (define (run-test) (get-symbol-points-for-row 1 0 (string->list "...$.*....")))
(define (run-test) (get-symbol-points 0 (read-file-to-list "2023-03/input-test.txt")))

; Run the sample. Should print 4361
; (define (run-test) (read-file-to-list "2023-03/input-test.txt"))

; Run real question. Returns ?
; (define (run-test) (read-file-to-list "2023-03/input.txt" ))
