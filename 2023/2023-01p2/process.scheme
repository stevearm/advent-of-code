(define (read-file-to-list filename)
        (call-with-input-file
            filename
            (lambda (p)
                (let f ((x (read-line p)))
                       (if (eof-object? x)
                       '()
                       (cons x (f (read-line p))))))))

(define (starts-with? input-string prefix-string)
        ; (equal? prefix-string (substring input-string 0 (string-length prefix-string))))
        (let ((input-length (string-length input-string))
              (prefix-length (string-length prefix-string)))
             (if (< input-length prefix-length)
                 #f
                 (equal? prefix-string (substring input-string 0 prefix-length)))))

(define (string-replace input-string to-find replace)
        (let ((to-find-length (string-length to-find))
              (input-string-length (string-length input-string)))
             (if (< input-string-length to-find-length)
                 input-string
                 (if (equal? to-find (substring input-string 0 to-find-length))
                     (string replace
                             (string-replace (substring input-string to-find-length input-string-length)
                                             to-find
                                             replace))
                     (string (substring input-string 0 1)
                             (string-replace (substring input-string 1 input-string-length)
                                             to-find
                                             replace))))))

(define (turn-numbers-to-digits input)
        (cond ((equal? input "") '())
              ((starts-with? input "one")   (string "1" (turn-numbers-to-digits (substring input 1 (string-length input)))))
              ((starts-with? input "two")   (string "2" (turn-numbers-to-digits (substring input 1 (string-length input)))))
              ((starts-with? input "three") (string "3" (turn-numbers-to-digits (substring input 1 (string-length input)))))
              ((starts-with? input "four")  (string "4" (turn-numbers-to-digits (substring input 1 (string-length input)))))
              ((starts-with? input "five")  (string "5" (turn-numbers-to-digits (substring input 1 (string-length input)))))
              ((starts-with? input "six")   (string "6" (turn-numbers-to-digits (substring input 1 (string-length input)))))
              ((starts-with? input "seven") (string "7" (turn-numbers-to-digits (substring input 1 (string-length input)))))
              ((starts-with? input "eight") (string "8" (turn-numbers-to-digits (substring input 1 (string-length input)))))
              ((starts-with? input "nine")  (string "9" (turn-numbers-to-digits (substring input 1 (string-length input)))))
              (else (string (substring input 0 1) (turn-numbers-to-digits (substring input 1 (string-length input)))))))

; Walk through the string returning first character that's a digit
(define (process-string-at-char input-string index direction)
        (let ((input-char (string-ref input-string index)))
             (if (char-numeric? input-char)
                 input-char
                 (process-string-at-char input-string (+ index direction) direction))))

; Create a number from the first digit from left concatenated with first digit from right
(define (process-string input-string)
        (string->number (string
                (process-string-at-char input-string 0 1)
                (process-string-at-char input-string (- (string-length input-string) 1) -1))))

; Read the file, process-string for each line, then sum the results
(define (process-file filename)
        (apply + (map process-string (map turn-numbers-to-digits (read-file-to-list filename)))))

; Run the test. Should print 281
; (define (run-test) (process-file "2023-01p2/input-test.txt"))

; Run real question. Returns 53515
(define (run-test) (process-file "2023-01p2/input.txt"))

; (define (run-test) (string-replace "testoneyesoneno" "one" "1"))
; (define (run-test) (turn-numbers-to-digits "testoneyesonenotwomaybe"))
; (define (run-test) (map turn-numbers-to-digits (car (map process-string (read-file-to-list "2023-01p2/input-test.txt")))))
; (define (run-test) (map process-string (map turn-numbers-to-digits (read-file-to-list "2023-01p2/input-test.txt"))))
